curve-properties.component.html
 <input type="number" class="form-control" [(ngModel)]="curveInfo.CurveProcessProperties.BedTolerance" name="BEDTOLERANCE"
              #BEDTOLERANCE="ngModel" [lte]="10000.00" (change)="updateLogsValidation()" required>
              <tr>
          <td colspan="2" align="right">
            <error-message *ngIf="curveBedToleranceValidationError && curveBedToleranceValidationError.length > 0" [message]="curveBedToleranceValidationError"></error-message>
          </td>
        </tr>
        
         <input type="number" class="form-control" [(ngModel)]="curveInfo.CurveProcessProperties.StepSize" name="STEPSIZE" #STEPSIZE="ngModel"
               (change)="updateLogsValidation()" required>
              <tr>
            <td colspan="2" align="right">
              <error-message *ngIf="curveStepSizeValidationError && curveStepSizeValidationError.length > 0" [message]="curveStepSizeValidationError"></error-message>
            </td>
          </tr>  
          <input type="number" class="form-control" [(ngModel)]="curveInfo.CurveProcessProperties.ValueTolerance" name="VALUETOLERANCE" #VALUETOLERANCE="ngModel"
            (change)="updateLogsValidation()"></td>
             <tr>
          <th><span>Window Length (ft):</span></th>
          <td>
              <input type="number" class="form-control" [(ngModel)]="curveInfo.CurveProcessProperties.WindowLength" name="WINDOW LENGTH"  #WINDOWLENGTH="ngModel"
         <tr>
          <td colspan="2" align="right">
            <error-message *ngIf="curveWindowLengthValidationError  && curveWindowLengthValidationError.length > 0" [message]="curveWindowLengthValidationError"></error-message>
          </td>
        </tr>
          
                
curve-properties.component.ts

import { ValidationResult } from "app/classes/dtos";
 public disableApply: boolean = true;
 public curveBedToleranceValidationError: string;
  public curveStepSizeValidationError: string;
  public curveValueToleranceValidationError: string;
  public curveWindowLengthValidationError: string;
  
  ngOnInit() {
    this.curveBedToleranceValidationError = '';
    this.curveStepSizeValidationError = '';
    this.curveWindowLengthValidationError = '';
  }
  
  
 
  public resetErrors() {
    this.curveBedToleranceValidationError = '';
    this.curveStepSizeValidationError = '';
    this.curveValueToleranceValidationError = '';
    this.curveWindowLengthValidationError = '';
  }
  
  public updateLogsValidation(args: any) {
    this.resetErrors();
    console.log("Process -onclickProcess()");
    this.analyzeDataService.validateCurveProcessProperties(this.curveInfo, this.curveProcessProperties).subscribe(validate => {
      if (!validate.IsValid) {
        let result = this.getValidationProperty(['BED TOLERANCE', 'STEP SIZE', 'VALUE TOLERANCE', 'WINDOW LENGTH'], validate);
        for(let i=0; i<result.length; i++){
          if(result[i].Name == 'BED TOLERANCE'){
            this.curveBedToleranceValidationError = result[i].Message;
          }
          else if(result[i].Name == 'STEP SIZE'){
             this.curveStepSizeValidationError = result[i].Message;
           }
           else if(result[i].Name == 'VALUE TOLERANCE'){
             this.curveValueToleranceValidationError = result[i].Message;
           }
           else if(result[i].Name == 'WINDOW LENGTH'){
            console.log("S Name", result[i].Name)
             this.curveWindowLengthValidationError = result[i].Message;
             console.log('S Message', result[i].Message);
           }
          else{
            this.disableApply = false;
          }
        }
      }
      }, (error) => {
        console.log("failed to set Process", error)
    });
  }


  private getValidationProperty(properties: string[], validation: ValidationResult): ValidationProperty[] {
    let validationProps: ValidationProperty[] = [];
    console.log("validation properties res", ValidationResult);
    console.log("validation properties", validationProps);
    validation.Messages.forEach(x => {
      properties.forEach(p => {
        if (x.indexOf(p) > -1) {
          validationProps.push(new ValidationProperty(p, x));
        }
      })
    })
    return validationProps;
  }
  //
    
 export class ValidationProperty {
  public Name: string;
  public Message: string

  constructor(name: string, message: string) {
    this.Name = name;
    this.Message = message
  }
}
 
analyze-data.service.ts
 public validateCurveProcessProperties(curves: CurveInfo,curveProcessProperties: CurveProcessProperties): Observable<any> {
    let queryString = '&alias=Gamma';
        return this.http.post(`${this.apiBaseURL}/api/v2/analyze/validateCurveProcessProperties?${queryString}`, JSON.stringify(curves.CurveProcessProperties), this.options)
            .map(this.extractData)
            .catch(this.handleError);
    }
  
 
 

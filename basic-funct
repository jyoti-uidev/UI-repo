/* To Hide the folder on the home page*/
html:
  <span *ngIf="isNavVisible()" dropdownToggle type="button"></span>
  
TS:
    isNavVisible(){
        return  this.router.url.indexOf('home') > -1  ? false : true;
    }
    
 /* Href */
  <a href="javascript:void(0)" class="pull-right"><i class="fa fa-question icon-style" style="padding-right:20px;color:gray;font-size:20px"></i></a>

/*Icons visible on hover over*/
html(table,span)
<span class="pull-right" class="edit_hover_class"><i class="fa fa-sign-out icon-style"></i>

styles.scss
  tr{
      td{
        span i{
        visibility:hidden;
        }
      }
    }
    tr:hover{
      background: linear-gradient(#6d7378, #494d50);
      td{
        span i{
        visibility: visible;
        }
      }
    }
    
    
    /*Disable the button only on home page*/
     <li role="menuitem">
     <a class="dropdown-item" [attr.href]="isNavVisibleSummary() ? null : 'javascript:void(0)'" [class.disabled]="isNavVisibleSummary()">
     Save As</a></li>
     
     .scss
      .disabled {
    pointer-events: none;
    color: gray !important;
    cursor: not-allowed;
    }
  .ts
    isNavVisibleSummary() {
        return this.router.url.indexOf('home') > -1 ? true : false;
    }
  
/*To Display Untitled on load when the project is empty: on add new- ngIf*/
<ng-template ngFor let-project [ngForOf]="appContext.OpenedProjects.Items">
                    <a  [routerLink]="['/project', project.Id]" class="project-name-details" style="font-size:18px"><span *ngIf='project.Name'>{{project.Name}}</span>
                    <span *ngIf='!project.Name'>Untitled</span></a>
 </ng-template>
 /*Mocking the data*/
 .ts
  this.targetWellsSubScription = this.dataService.getTargetWells(dataSource).subscribe(
      data => {
        this.availableTargetWells = data;
      /*adding more data*/
      for (let i = 1; i < 10; i++) {
          this.availableTargetWells.push(new Well(i.toString(), "Well-".concat(i.toString()), null))
        }
      },
      /*---*/
      error => {
        console.error(error);
      });
  }
/*Add untitled in sequence and Time format acco to clients machine*/
 private loadExistingProjects() {
    this.projectsSubscription = this.projectDataService.getProjects().subscribe(projects => {
      var i: number = 1;
      projects.map ( x=> {
        if (!x.Name) {
          x.Name = 'Untitled ' + i;
          i++;
        }
        x.DateCreated = new Date(Date.parse(x.DateCreated.toString() + '-05:00'));
        x.LastModified = new Date(Date.parse(x.LastModified.toString() + '-05:00'));
      })

      this.existingProjects = projects.sort((a, b) => { return b.LastModified.getTime() - a.LastModified.getTime() })
    }, getProjectError => {
      console.error(getProjectError);
    });
  }

